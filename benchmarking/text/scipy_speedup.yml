benchmark:
  groups:
    - name: one_to_one
      config:
        sizes:
          - "8x8x1x1"
          - "16x16x1x1"
          - "24x24x1x1"
          - "32x32x1x1"
          - "40x40x1x1"
          - "48x48x1x1"
          - "56x56x1x1"
          - "64x64x1x1"
        data_type: single
        benchmark_type: Compute
        outer_iterations: 2
        inner_iterations: 5
        min_measure_seconds: 1
        validate: false
        keep: false
      runs:
        - name: scipy
          type: external
          alg_type: one_to_one
          path: "../../existing/python/benchmark.sh"

        - name: basic
          algorithm: nai_orig_one_to_one

        - name: fft_orig
          algorithm: fft_orig_one_to_one

        - name: nai_shuffle_multimat_right_work_distribution
          algorithm: nai_shuffle_multimat_right_work_distribution_one_to_one
          args:
            warps_per_thread_block: 8
            rows_per_thread: 1
            distribution_type: "triangle"

        - name: nai_shuffle_multirow_both
          algorithm: nai_shuffle_multirow_both_one_to_one
          args:
            warps_per_thread_block: 8
            shifts_per_thread: [4, 8]
            left_rows_per_iteration: 4

        - name: nai_warp_per_shift
          algorithm: nai_warp_per_shift_one_to_one
          args:
            shifts_per_thread_block: 16

        - name: nai_warp_per_shift_shared_mem
          algorithm: nai_warp_per_shift_shared_mem_one_to_one
          args:
            shifts_per_thread_block: 16
            shared_mem_row_size: 128
            strided_load: true
            column_group_per_block: true

    - name: one_to_many
      config:
        sizes:
          - "8x8x1x2"
          - "16x16x1x2"
          - "24x24x1x2"
          - "32x32x1x2"
          - "40x40x1x2"
          - "48x48x1x2"
          - "56x56x1x2"
          - "64x64x1x2"
          - "8x8x1x4"
          - "16x16x1x4"
          - "24x24x1x4"
          - "32x32x1x4"
          - "40x40x1x4"
          - "48x48x1x4"
          - "56x56x1x4"
          - "64x64x1x4"
          - "8x8x1x8"
          - "16x16x1x8"
          - "24x24x1x8"
          - "32x32x1x8"
          - "40x40x1x8"
          - "48x48x1x8"
          - "56x56x1x8"
          - "64x64x1x8"
          - "8x8x1x16"
          - "16x16x1x16"
          - "24x24x1x16"
          - "32x32x1x16"
          - "40x40x1x16"
          - "48x48x1x16"
          - "56x56x1x16"
          - "64x64x1x16"
        data_type: single
        benchmark_type: Compute
        outer_iterations: 2
        inner_iterations: 5
        min_measure_seconds: 1
        validate: false
        keep_output: false
      runs:
        - name: scipy
          type: external
          alg_type: one_to_many
          path: "../../existing/python/benchmark.sh"

        - name: basic
          algorithm: nai_orig_one_to_many

        - name: fft_orig
          algorithm: fft_orig_one_to_many

        - name: nai_shuffle_multimat_right_work_distribution
          algorithm: nai_shuffle_multimat_right_work_distribution_one_to_many
          args:
            warps_per_thread_block: 8
            right_matrices_per_thread: 8
            rows_per_thread: 1
            distribution_type: "triangle"

        - name: nai_shuffle_multirow_both_multimat_right
          algorithm: nai_shuffle_multirow_both_multimat_right_one_to_many
          args:
            warps_per_thread_block: 4
            shifts_per_thread_right_matrix: 4
            right_matrices_per_thread: 4
            left_rows_per_iteration: 4

    - name: n_to_mn
      config:
        sizes:
          - "8x8x2x4"
          - "16x16x2x4"
          - "24x24x2x4"
          - "32x32x2x4"
          - "40x40x2x4"
          - "48x48x2x4"
          - "56x56x2x4"
          - "64x64x2x4"
          - "8x8x2x8"
          - "16x16x2x8"
          - "24x24x2x8"
          - "32x32x2x8"
          - "40x40x2x8"
          - "48x48x2x8"
          - "56x56x2x8"
          - "64x64x2x8"
          - "8x8x4x8"
          - "16x16x4x8"
          - "24x24x4x8"
          - "32x32x4x8"
          - "40x40x4x8"
          - "48x48x4x8"
          - "56x56x4x8"
          - "64x64x4x8"
          - "8x8x4x16"
          - "16x16x4x16"
          - "24x24x4x16"
          - "32x32x4x16"
          - "40x40x4x16"
          - "48x48x4x16"
          - "56x56x4x16"
          - "64x64x4x16"
        data_type: single
        benchmark_type: Compute
        outer_iterations: 2
        inner_iterations: 5
        min_measure_seconds: 1
        validate: false
        keep_output: false
      runs:
        - name: scipy
          type: external
          alg_type: n_to_mn
          path: "../../existing/python/benchmark.sh"

        - name: basic
          algorithm: nai_orig_n_to_mn

        - name: fft_orig
          algorithm: fft_orig_n_to_mn

        - name: nai_shuffle_multimat_right_work_distribution
          algorithm: nai_shuffle_multimat_right_work_distribution_n_to_mn
          args:
            warps_per_thread_block: 4
            right_matrices_per_thread: 8
            rows_per_thread: 1
            distribution_type: "triangle"

        - name: nai_shuffle_multirow_both_multimat_right
          algorithm: nai_shuffle_multirow_both_multimat_right_n_to_mn
          args:
            warps_per_thread_block: 4
            shifts_per_thread_right_matrix: 4
            right_matrices_per_thread: 4
            left_rows_per_iteration: 4
            num_cuda_streams: 16

        - name: nai_warp_per_shift_shared_mem
          algorithm: nai_warp_per_shift_shared_mem_n_to_mn
          args:
            shifts_per_thread_block: 16
            shared_mem_row_size: 128
            strided_load: true
            column_group_per_block: false
            right_matrices_per_block: 2
            num_cuda_streams: 8

    - name: n_to_m
      config:
        sizes:
          - "8x8x4x4"
          - "16x16x4x4"
          - "24x24x4x4"
          - "32x32x4x4"
          - "40x40x4x4"
          - "48x48x4x4"
          - "56x56x4x4"
          - "64x64x4x4"
          - "8x8x4x8"
          - "16x16x4x8"
          - "24x24x4x8"
          - "32x32x4x8"
          - "40x40x4x8"
          - "48x48x4x8"
          - "56x56x4x8"
          - "64x64x4x8"
          - "8x8x8x4"
          - "16x16x8x4"
          - "24x24x8x4"
          - "32x32x8x4"
          - "40x40x8x4"
          - "48x48x8x4"
          - "56x56x8x4"
          - "64x64x8x4"
          - "8x8x8x8"
          - "16x16x8x8"
          - "24x24x8x8"
          - "32x32x8x8"
          - "40x40x8x8"
          - "48x48x8x8"
          - "56x56x8x8"
          - "64x64x8x8"
        data_type: single
        benchmark_type: Compute
        outer_iterations: 2
        inner_iterations: 4
        min_measure_seconds: 1
        validate: false
        keep_output: false
      runs:
        - name: scipy
          type: external
          alg_type: n_to_m
          path: "../../existing/python/benchmark.sh"

        - name: basic
          algorithm: nai_orig_n_to_m

        - name: fft_orig
          algorithm: fft_better_n_to_m

        - name: nai_shuffle_multimat_both_work_distribution
          algorithm: nai_shuffle_multimat_both_work_distribution_n_to_m
          args:
            warps_per_thread_block: 4
            left_matrices_per_thread: 4
            right_matrices_per_thread: 4
            rows_per_thread: 1
            distribution_type: "triangle"

        - name: nai_shuffle_multirow_both_multimat_both
          algorithm: nai_shuffle_multirow_both_multimat_both_n_to_m
          args:
            warps_per_thread_block: 4
            shifts_per_thread_right_matrix: 4
            # 4 and 4 matrices is better for larger number of input matrices
            # at least 128x128
            left_matrices_per_thread: 2
            right_matrices_per_thread: 2
            left_rows_per_iteration: 4

        # Cannot be run on laptop
        - name: nai_shuffle_multirow_both_multimat_both_large
          algorithm: nai_shuffle_multirow_both_multimat_both_n_to_m
          args:
            warps_per_thread_block: 4
            shifts_per_thread_right_matrix: 4
            # 4 and 4 matrices is better for larger number of input matrices
            # at least 128x128
            left_matrices_per_thread: 4
            right_matrices_per_thread: 4
            left_rows_per_iteration: 4
